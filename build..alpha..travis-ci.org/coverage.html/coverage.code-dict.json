{"/home/travis/build/npmtest/node-npmtest-dnscache/test.js":"/* istanbul instrument in package npmtest_dnscache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dnscache/lib.npmtest_dnscache.js":"/* istanbul instrument in package npmtest_dnscache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dnscache = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dnscache = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dnscache/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dnscache && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dnscache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dnscache\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dnscache.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_dnscache.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dnscache.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_dnscache.__dirname +\n                    '/lib.npmtest_dnscache.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dnscache/node_modules/dnscache/lib/index.js":"/*\n* Copyright (c) 2013, Yahoo! Inc. All rights reserved.\n* Copyrights licensed under the New BSD License.\n* See the accompanying LICENSE file for terms.\n*/\n\nvar CacheObject = require('./cache.js'),\n    deepCopy = require('lodash.clone'),\n    dns = require('dns');\n\n\n// original function storage\nvar EnhanceDns = function (conf) {\n        conf = conf || {};\n        conf.ttl = parseInt(conf.ttl, 10) || 300; //0 is not allowed ie it ttl is set to 0, it will take the default\n        conf.cachesize = parseInt(conf.cachesize, 10); //0 is allowed but it will disable the caching\n\n        if (isNaN(conf.cachesize)) {\n            conf.cachesize = 1000; //set default cache size to 1000 records max\n        }\n        if (!conf.enable || conf.cachesize <= 0 || dns.internalCache) {\n            //cache already exists, means this code has already execute ie method are already overwritten\n            return dns;\n        }\n        \n        // original function storage\n        var backup_object = {\n                lookup : dns.lookup,\n                resolve : dns.resolve,\n                resolve4 : dns.resolve4,\n                resolve6 : dns.resolve6,\n                resolveMx : dns.resolveMx,\n                resolveTxt : dns.resolveTxt,\n                resolveSrv : dns.resolveSrv,\n                resolveNs : dns.resolveNs,\n                resolveCname : dns.resolveCname,\n                reverse : dns.reverse\n            },\n            // cache storage instance\n            cache = conf.cache ? /*istanbul ignore next*/ new conf.cache(conf) : new CacheObject(conf);\n        \n        // insert cache object to the instance\n        dns.internalCache = cache;\n\n        // override dns.lookup method\n        dns.lookup = function (domain, options, callback) {\n            var family = 0;\n            var hints = 0;\n            var all = false;\n            if (arguments.length === 2) {\n                callback = options;\n                options = family;\n            } else if (typeof options === 'object') {\n                if (options.family) {\n                    family = +options.family;\n                    if (family !== 4 && family !== 6) {\n                        callback(new Error('invalid argument: `family` must be 4 or 6'));\n                        return;\n                    }\n                }\n                /*istanbul ignore next - \"hints\" require node 0.12+*/\n                if (options.hints) {\n                    hints = +options.hints;\n                }\n                all = (options.all === true);\n            } else if (options) {\n                family = +options;\n                if (family !== 4 && family !== 6) {\n                    callback(new Error('invalid argument: `family` must be 4 or 6'));\n                    return;\n                }\n            }\n\n            cache.get('lookup_' + domain + '_' + family + '_' + hints + '_' + all, function (error, record) {\n                if (record) {\n                    /*istanbul ignore next - \"all\" option require node 4+*/\n                    if (Array.isArray(record)) {\n                        return callback(error, record);\n                    }\n                    return callback(error, record.address, record.family);\n                }\n\n                try{\n                    backup_object.lookup(domain, options, function (err, address, family_r) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        var value;\n                        /*istanbul ignore next - \"all\" option require node 4+*/\n                        if (Array.isArray(address)) {\n                            value = address;\n                        } else {\n                            value = {\n                                'address' : address,\n                                'family' : family_r\n                            };\n                        }\n                        cache.set('lookup_' + domain + '_' + family + '_' + hints + '_' +  all, value, function () {\n                            callback(err, address, family_r);\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolve method\n        dns.resolve = function (domain, type, callback) {\n            var type_new, callback_new;\n\n            if (typeof type === 'string') {\n                type_new = type;\n                callback_new = callback;\n            } else {\n                type_new = \"A\";\n                callback_new = type;\n            }\n\n            cache.get('resolve_' + domain + '_' + type_new, function (error, record) {\n                if (record) {\n                    return callback_new(error, deepCopy(record), true);\n                }\n                try {\n                    backup_object.resolve(domain, type_new, function (err, addresses) {\n                        if (err) {\n                            return callback_new(err);\n                        }\n                        cache.set('resolve_' + domain + '_' + type_new, addresses, function () {\n                            callback_new(err, deepCopy(addresses), false);\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback_new(err);\n                }\n            });\n        };\n\n        // override dns.resolve4 method\n        dns.resolve4 = function (domain, callback) {\n            cache.get('resolve4_' + domain, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n                try {\n                    backup_object.resolve4(domain, function (err, addresses) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        cache.set('resolve4_' + domain, addresses, function () {\n                            callback(err, deepCopy(addresses));\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolve6 method\n        dns.resolve6 = function (domain, callback) {\n            cache.get('resolve6_' + domain, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n                try {\n                    backup_object.resolve6(domain, function (err, addresses) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        cache.set('resolve6_' + domain, addresses, function () {\n                            callback(err, deepCopy(addresses));\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveMx method\n        dns.resolveMx = function (domain, callback) {\n            cache.get('resolveMx_' + domain, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n                try {\n                    backup_object.resolveMx(domain, function (err, addresses) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        cache.set('resolveMx_' + domain, addresses, function () {\n                            callback(err, deepCopy(addresses));\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveTxt method\n        dns.resolveTxt = function (domain, callback) {\n            cache.get('resolveTxt_' + domain, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n                try {\n                    backup_object.resolveTxt(domain, function (err, addresses) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        cache.set('resolveTxt_' + domain, addresses, function () {\n                            callback(err, deepCopy(addresses));\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveSrv method\n        dns.resolveSrv = function (domain, callback) {\n            cache.get('resolveSrv_' + domain, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n                try {\n                    backup_object.resolveSrv(domain, function (err, addresses) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        cache.set('resolveSrv_' + domain, addresses, function () {\n                            callback(err, deepCopy(addresses));\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveNs method\n        dns.resolveNs = function (domain, callback) {\n            cache.get('resolveNs_' + domain, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n                try {\n                    backup_object.resolveNs(domain, function (err, addresses) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        cache.set('resolveNs_' + domain, addresses, function () {\n                            callback(err, deepCopy(addresses));\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveCname method\n        dns.resolveCname = function (domain, callback) {\n            cache.get('resolveCname_' + domain, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n                try {\n                    backup_object.resolveCname(domain, function (err, addresses) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        cache.set('resolveCname_' + domain, addresses, function () {\n                            callback(err, deepCopy(addresses));\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.reverse method\n        dns.reverse = function (ip, callback) {\n            cache.get('reverse_' + ip, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n                try {\n                    backup_object.reverse(ip, function (err, addresses) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        cache.set('reverse_' + ip, addresses, function () {\n                            callback(err, deepCopy(addresses));\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n        return dns;\n};\n\nmodule.exports = function(conf) {\n    return new EnhanceDns(conf);\n};\n","/home/travis/build/npmtest/node-npmtest-dnscache/node_modules/dnscache/lib/cache.js":"/*\n* Copyright (c) 2013, Yahoo! Inc. All rights reserved.\n* Copyrights licensed under the New BSD License.\n* See the accompanying LICENSE file for terms.\n*/\n\nvar CacheObject = function (conf) {\n    conf = conf || {};\n    conf.ttl = parseInt(conf.ttl, 10) || 300; //0 is not permissible\n    conf.cachesize = parseInt(conf.cachesize, 10) || 1000; //0 is not permissible\n    \n    this.ttl = conf.ttl * 1000;\n    this.max = conf.cachesize;\n\n    this.count = 0;\n    this.data = {};\n    var next = require('asap');\n\n    this.set = function (key, value, callback) {\n        var self = this;\n        next(function () {\n            if (self.data[key]) {\n                if (self.data[key].newer) {\n                    if (self.data[key].older) {\n                        self.data[key].newer.older = self.data[key].older;\n                        self.data[key].older.newer = self.data[key].newer;\n                    } else {\n                        self.tail = self.data[key].newer;\n                        delete self.tail.older;\n                    }\n\n                    self.data[key].older = self.head;\n                    self.head.newer = self.data[key];\n                    delete self.data[key].newer;\n                    self.head = self.data[key];\n                }\n\n                self.head.val = value;\n                self.head.hit = 0;\n                self.head.ts = Date.now();\n            } else {\n                // key is not exist\n                self.data[key] = {\n                    \"key\" : key,\n                    \"val\" : value,\n                    \"hit\" : 0,\n                    \"ts\" : Date.now()\n                };\n\n                if (!self.head) {\n                    // cache is empty\n                    self.head = self.data[key];\n                    self.tail = self.data[key];\n                } else {\n                    // insert the new entry to the front\n                    self.head.newer = self.data[key];\n                    self.data[key].older = self.head;\n                    self.head = self.data[key];\n                }\n\n                if (self.count >= self.max) {\n                    // remove the tail\n                    var temp = self.tail;\n                    self.tail = self.tail.newer;\n                    delete self.tail.next;\n                    delete self.data[temp.key];\n                } else {\n                    self.count = self.count + 1;\n                }\n            }\n            /* jshint -W030 */\n            callback && callback(null, value);\n        });\n    };\n\n    this.get = function (key, callback) {\n        var self = this;\n        if (!callback) {\n            throw('cache.get callback is required.');\n        }\n\n        next(function () {\n            if (!self.data[key]) {\n                return callback(null, undefined);\n            }\n            var value;\n            if (conf.ttl !== 0 && (Date.now() - self.data[key].ts) >= self.ttl) {\n                if (self.data[key].newer) {\n                    if (self.data[key].older) {\n                        // in the middle of the list\n                        self.data[key].newer.older = self.data[key].older;\n                        self.data[key].older.newer = self.data[key].newer;\n                    } else {\n                        // tail\n                        self.tail = self.data[key].newer;\n                        delete self.tail.older;\n                    }\n                } else {\n                    // the first item\n                    if (self.data[key].older) {\n                        self.head = self.data[key].older;\n                        delete self.head.newer;\n                    } else {\n                        // 1 items\n                        delete self.head;\n                        delete self.tail;\n                    }\n                }\n\n                delete self.data[key];\n                self.count = self.count - 1;\n            } else {\n                self.data[key].hit = self.data[key].hit + 1;\n                value = self.data[key].val;\n            }\n            callback(null, value);\n        });\n    };\n};\n\nmodule.exports = CacheObject;\n"}